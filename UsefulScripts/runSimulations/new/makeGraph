#!/usr/bin/python3
import time
beginTime = time.time()

#===============================================================#
# Importations
#===============================================================#
import numpy as np
import subprocess
import os
import json
import pandas as pd
import matplotlib.pyplot as plt
from glob import glob
from shutil import copyfile
plt.style.use('ggplot')
import sys

#===============================================================#
# Important Constants
#===============================================================#
numVars =  3
numTemps = 3
numKs = 3
testAs = np.linspace(1.0,128.0,numVars)
testTemps = np.linspace(0.01,10.0,numTemps)
testKs = np.linspace(0.1,100.0,numKs)
Config = str(sys.argv[1])

#===============================================================#
# Useful Functions
#===============================================================#
def stdoutLog(message,sep,Top=False):
    width=40
    if Top:
        print(sep * width)
    print(message)
    print(sep * width)
def createMetadata(baseProject):
    Metadata = ['Path\tAvalue\tTvalue\tKvalue']
    JSON = {}
    for n,K in enumerate(testKs):
        JSON['K{}'.format(n+1)] = {}
        for i,A in enumerate(testAs):
            JSON['K{}'.format(n+1)]['A{}'.format(i+1)] = {}
            for j,T in enumerate(testTemps):
                JSON['K{}'.format(n+1)]['A{}'.format(i+1)]['T{}'.format(j+1)] = {}
                JSON['K{}'.format(n+1)]['A{}'.format(i+1)]['T{}'.format(j+1)]['Avalue'] = A
                JSON['K{}'.format(n+1)]['A{}'.format(i+1)]['T{}'.format(j+1)]['Temp'] = T
                JSON['K{}'.format(n+1)]['A{}'.format(i+1)]['T{}'.format(j+1)]['Kvalue'] = K
                Metadata.append('K{}/A{}/temp{}\t{}\t{}\t{}'.format(n+1,i+1,j+1,A,T,K))
    jsonPath = os.path.join(baseProject,'Metadata.json')
    tablePath = os.path.join(baseProject,'Metadata.tab')
    with open(jsonPath,'w') as J:
        json.dump(JSON, J, sort_keys=True, indent=4)
    with open(tablePath,'w') as T:
        T.write('\n'.join(Metadata))
def tryMkdir(directory):
    if os.path.isdir(directory):
        raise SystemExit('Path already exists:\n\t{}'.format(directory))
    else:
        try:
            os.mkdir(directory)
            os.chdir(directory)
        except:
            raise SystemExit('Could not make directory:\n\t{}'.format(directory))
def testFile(filename):
    if not os.path.exists(filename):
        raise SystemExit('File does not exist:\n\t{}'.format(filename))
def testFile2(filename):
    if os.path.exists(filename):
        raise SystemExit('Cannot overwrite file:\n\t{}'.format(filename))
def runSingleSimulation(contextDict):
    configCommand = r"{{ time -p createInput {CONFIG} {TVAL} {AVAL} {KVAL}; }} >> DLMESO_K{KN}_A{AN}_T{TN}.log 2>&1".format(**contextDict)
    dpdCommand = r"{{ time -p dpd; }} >> DLMESO_K{KN}_A{AN}_T{TN}.log 2>&1".format(**contextDict)
    trajectCommand = r"{{ time -p Traject 1; }} >> DLMESO_K{KN}_A{AN}_T{TN}.log 2>&1".format(**contextDict)
    radiusCommand = r"{{ time -p radius.exe 1; }} >> DLMESO_K{KN}_A{AN}_T{TN}.log 2>&1".format(**contextDict)
    subprocess.run(configCommand, check=True, shell=True, executable='/bin/bash')
    subprocess.run(dpdCommand, check=True, shell=True, executable='/bin/bash')
    subprocess.run(trajectCommand, check=True, shell=True, executable='/bin/bash')
    subprocess.run(radiusCommand, check=True, shell=True, executable='/bin/bash')
def getAverageRog(radiusDataFile):
    testFile(radiusDataFile)
    with open(radiusDataFile,'r') as F:
        Data = F.readlines()
    lastPoints = [float(line.strip().split(' ')[-1]) for line in Data[-25:]]
    return sum(lastPoints)/len(lastPoints)
def initializeResultsFile(fileToWrite):
    testFile2(fileToWrite)
    os.mknod(fileToWrite)
def writeResults(fileToWrite,rowTuple):
    with open(fileToWrite,'a') as F:
        F.write('\t'.join(str(item) for item in rowTuple) + '\n')
def createGraph(fileToRead,fileToWrite):
    testFile(fileToRead)
    testFile2(fileToWrite)
    Data = pd.read_csv(fileToRead, sep='\t', header=None)
    plt.figure()
    plt.plot(Data[0], Data[1], 'o-')
    plt.xlabel(r'$k_{B}T$')
    plt.ylabel('Radius of Gyration')
    plt.title('Radius of Gyration vs Temperature')
    plt.savefig(fileToWrite, bbox_inches='tight')
def gatherGraphs(baseDirectory):
    Data = os.path.join(baseDirectory,'Data')
    tryMkdir(Data)
    Plots = os.path.join(Data,'Plots')
    tryMkdir(Plots)
    Raw = os.path.join(Data,'Raw')
    tryMkdir(Raw)
    for K in glob(os.path.join(Data,'K*')):
        for A in glob(os.path.join(K,'A*')):
            RawData = glob(os.path.join(A,'radius_*'))[0]
            Graph = glob(os.path.join(A,'radiusplot_*'))[0]
            copyfile(RawData,os.path.join(Raw,os.path.basename(RawData)))
            copyfile(Graph,os.path.join(Plots,os.path.basename(Graph)))

#===============================================================#
# Main
#===============================================================#
def main(configFile):
    stdoutLog('START','#',True)
    # Create Project Directory
    projectPath = os.path.join(os.getcwd(),'SimulationProject')
    tryMkdir(projectPath)
    createMetadata(projectPath)
    for k,K in enumerate(testKs,start=1):
        # Create Directory for individual K value
        kPath = os.path.join(projectPath, 'K{}'.format(k))
        tryMkdir(kPath)
        for a,A in enumerate(testAs,start=1):
            # Create Directory for individual A value
            aPath = os.path.join(kPath, 'A{}'.format(a))
            tryMkdir(aPath)
            # Initialize the file that will get Temperature vs RoG data in tab separated format
            resultsFile = os.path.join(aPath,'radius_K{KN}_A{AN}.dat'.format(KN=k,AN=a))
            initializeResultsFile(resultsFile)
            for t,T in enumerate(testTemps,start=1):
                stdoutLog('K#{}A#{}T#{} Started'.format(k,a,t),'=')
                # Create Directory for individual T value
                tPath = os.path.join(aPath, 'T{}'.format(t))
                tryMkdir(tPath)
                # Run simulation for indvidual T value
                Context = {"TVAL": T,
                            "TN": t,
                           "AVAL": A,
                            "AN": a,
                           "KVAL": K,
                            "KN": k,
                           "CONFIG": configFile}
                runSingleSimulation(Context)
                # Write temperature and radius of gyration to results
                writeResults(resultsFile, (T, getAverageRog(os.path.join(tPath,'radius_polymer'))))
            # Create plot of results
            graphFile = os.path.join(aPath,'radiusplot_K{KN}_A{AN}.pdf'.format(KN=k,AN=a))
            createGraph(resultsFile, graphFile)
    gatherGraphs(projectPath)
    stdoutLog('FINISHED','#',True)
main(Config)
endTime = time.time()
print('Total Time taken: {:.1f} seconds'.format(endTime-beginTime))
