#!/usr/bin/python3

import imp
import sys
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d
import numpy as np
from math import cos, sin,pi

inputPath=str(sys.argv[1])
Temperature=str(sys.argv[2])
Avalue=str(sys.argv[3])
kvalue=str(sys.argv[4])

global INPUT_FILE_VARIABLES
with open(inputPath,'r') as Inputfile:
    INPUT_FILE_VARIABLES = imp.load_source('INPUT_FILE_VARIABLES','',Inputfile)

Height = INPUT_FILE_VARIABLES.Height
Curlyness = INPUT_FILE_VARIABLES.curlyness
BondType = INPUT_FILE_VARIABLES.bondtype
BondParams = INPUT_FILE_VARIABLES.bondparams
IntType = INPUT_FILE_VARIABLES.inttype
IntParams = INPUT_FILE_VARIABLES.intparams

Template = '''DL_MESO HomoPolymer Simulation

SPECIES {NUMSPECIES}
{SPECIES}

MOLECULES {NUMMOLS}
{MOLECULES}

INTERACTIONS {NUMINTERACTIONS}
{INTERACTIONS}

close'''

molTemplate='''{NAME}
nummols {NUMMOLS}
beads {BEADS}
{COORDS}
bonds {BONDS}
{BONDPARAMS}
finish'''

def main(height,curlyness):
    #Height = 10
    #curlyness = 1j # Higher is more curly
    def x(t):
        return (np.exp(t*curlyness)).real
    def y(t):
        return (np.exp(t*curlyness)).imag
    def z(t):
        return t

    T = [g for g in np.linspace(0,Height,20)]
    Z = [(x(t),y(t),z(t)) for t in T]
    x,y,z = list(zip(*Z))
    Coordinates = '\n'.join([' '.join(['A ']+[str(round(b,6)) for b in a]) 
                                                              for a in Z])
    with open('coords.dat','w') as f:
        f.write(Coordinates)
    #print(Coordinates)
    print('Successfully created coords.dat for height={} and curlyness={}'.format(Height,curlyness))
    #fig = plt.figure()
    #ax = fig.add_subplot(111,projection='3d')
    #ax.plot(x,y,z,'o-')
    ##plt.axis('off')
    ##plt.savefig('Diagram2.png')
    #plt.show()
main(Height,Curlyness)

def getCoords(filename):
    stuff = []
    with open(filename,'r') as F:
        stuff = F.readlines()
    return '\n'.join([a.strip() for a in stuff])
def makeBonds(beads,bondType,bondParams):
    total = []
    numBonds = beads - 1
    for i in range(numBonds):
        row = ' '.join([str(bondType),
                        str(i+1),
                        str(i+2),
                        kvalue,
                        str(bondParams[0])])
        total.append(row)
    return '\n'.join(total)
BONDTYPE=BondType
BONDPARMS=BondParams
Context = {
        'NAME': 'polymer',
        'NUMMOLS': 1,
        'BEADS': 20,
        'COORDS': getCoords('coords.dat'),
        'BONDS': 19,
        'BONDPARAMS': makeBonds(20,BONDTYPE,BONDPARMS)
        }
Molecule = molTemplate.format(**Context)
with open('polymer.dat','w') as F:
    F.write(Molecule)
print('Successfully made molecule with bond'+
        ' type="{}" and parameters={}'.format(BONDTYPE,BONDPARMS))

def getMolecules(filename):
    stuff = []
    with open(filename,'r') as F:
        stuff = F.readlines()
    return '\n'.join([a.strip() for a in stuff])
def getSpecies(filename):
    stuff = []
    with open(filename,'r') as F:
        stuff = F.readlines()
    speciesName = stuff[3][0]
    speciesRow = ' '.join([speciesName,
                            str(1.0),
                            str(0.0),
                            str(0)])
    return speciesRow
def getInteractions(intType,A,intPars):
    stuff = 'A A {} {} {}'.format(intType,A,' '.join(str(a) for a in intPars))
    return stuff

fieldContext = {
        "NUMSPECIES": 1,
        "SPECIES": getSpecies('polymer.dat'),
        "NUMMOLS": 1,
        "MOLECULES": getMolecules('polymer.dat'),
        "NUMINTERACTIONS": 1,
        "INTERACTIONS": getInteractions(IntType, Avalue, IntParams)
        }

field = Template.format(**fieldContext)
with open('FIELD','w') as F:
    F.write(field)
print('Successfully made FIELD file')

Volume=INPUT_FILE_VARIABLES.V
Steps=INPUT_FILE_VARIABLES.S
EQSteps=INPUT_FILE_VARIABLES.EQS

controlTemplate = '''DL_MESO HomoPolymer Simulation

volume {volume}
temperature {temp}
cutoff 1.0
boundary halo 2.0

timestep 0.01
steps {steps}
equilibration steps {eqsteps}
scale temperature every 10
trajectory 0 200
stats every 100
stack size 100
print every 100
job time 10800.0
close time 100.0

ensemble nvt dpdvv'''

controlContext = {
        "volume": Volume,
        "temp": Temperature,
        "steps": Steps,
        "eqsteps": EQSteps
        }

goodFile = controlTemplate.format(**controlContext)

with open('CONTROL','w') as F:
    F.write(goodFile)
